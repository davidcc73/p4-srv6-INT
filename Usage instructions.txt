#--------------------mininet logs
make mn-log

#--------------------BMv2 logs, created on P4 by doing log_msg("") in the code
tmp/switchID/stratum_bmv2.log
 * Example: log_msg("User defined message");
 * or log_msg("Value1 = {}, Value2 = {}",{value1, value2});

#--------------------At first execution
#install docker for ubuntu (ubuntu uses a diferent version) https://docs.docker.com/engine/install/ubuntu/
sudo apt-get install sshpass             #install sshpass to be able to use the make commands
sudo apt install python3-pip
sudo pip3 install scapy
sudo pip3 install mininet                #install mininet at host (makes clean ups easier)
sudo pip3 install numpy
sudo make deps 

#influxdb, to install see the file "setup/prepare inluxdb.txt"
#grafana, to install see the file "setup/prepare grafana.txt"  url=http://localhost:3000/

#to help dissecting INT reports, install wirehsark plugin located at "util/wireshark/P4INT_report_IPV6.lua"
#into /usr/lib/x86_64-linux-gnu/wireshark/plugins/
#it's limited to a fixed certain number of hops, buts easy to modify it to a different number and new report's fields
#some data is displeyed incorrectly, trust the one printed by the INT collector

#the used stratum image is a custom image of stratrum version: 2022-06-30 built from source by modifying the Dockerfile 
(see file Dockerfile at util/stratum/Dockerfile) adding X11, pip3 at runtime and scapy to it, dropped at /tools/mininet/ to compile it,  
the image was compiled with name:davidcc73/ngsdn-tutorial:stratum_bmv2_X11_scapy
(the official installation script contains some small naming errors that will pop up during compilation)
the image was published at docker hub, and is pulled from there, by doing make deps

#--------------------Start ONOS and mininet. Execute this commands in groups, not all at once
sudo make stop                                      #Delete the mininet and ONOS containers
sudo mn -c                                          #Delete virtual interfaces that mininet created (mininet must also be installed at host)
sudo make clean                                     #Delete P4 and ONOS compilations
xhost +                                             #Enable X11 forwarding
sudo make start                                     #Start ONOS and mininet containers
sudo make app-build                                 #Recompile P4 code and ONOS apps

#--------------------Wait until ONOS Boot is complete, then execute the following commands
make app-reload                                     #Push ONOS apps to ONOS
make netcfg                                         #Push mininet topology to ONOS

#--------------------at ONOS cli (sudo make onos-cli) wait until ONOS logs stop, so all links are detected
#source /config/Static_Routing_Tables/static_routing_tables.txt    #Push static routing rules to switchs

INT_Role-set                                        #Push INT roles at config\INT_Tables to switchs, 1 file peer device               
source /config/ua_config.txt
source /config/INT_Tables/INT_Transit_config.txt    #Push INT instructions to switchs
source /config/hosts_routing_tables.txt             #Push host routing rules to switchs (between switch and it's hots)

#SELECT THE ROUTING MODE
#The P4 code 1ยบ searchs the ECMP table, if it does not find a match, it searches the KShort table
#Calculate-Routing-Paths KShort             #Creates the routing rule between switchs (KShort, ECMP)
Calculate-Routing-Paths ECMP                #If there is no flow label to read, it will not work (like pings) 


#--------------------Start the INT collector
Note: make sure the collector (THE SYSTEM RUNNING IT) is syncronized with an ntp or rather manually syn it
sudo python3 INT/receive/collector_influxdb.py 

#--------------------Start the INT Analyzer
sudo python3 INT/analyzer/analyzer.py 


#--------------------at mininet cli (sudo make mn-cli) 
#For the hosts be detected in the topology send a packet from them, easy way:
input option "2" in the mininet menu interface

#--------------------To create INT traffic
#To see some INT generating commands go to Commands/test_INT_Telemetry.txt

#The generated telemetry should be visible in the grafana dashboard


#--------------------at ONOS cli (make onos-cli)
#To see the SRv6 commands go to Commands/srv6_insert.txt



#--------python3 scrits to create ba chat like traffic between h1 and h2_1 using tcp, 
#can not be used at mininet, server does not reply to the SYN packet, probably mininet is blocking it on how simulates hosts
python3 /INT/h1_tcp.py
python3 /INT/h2_tcp.py


Note: ECMP we only calculate paths for flow labels 0-4, to change, need to change maxflowlabel in the function that creates the paths
      ECMP when using SRv6, does not take into account the src value in the packet when choosing the path